name: Python

on:
  push:
    branches:
    - '*'
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-python:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    # Extract COTS versions from Dockerfile
    - name: COTS Versions
      id: cots-versions
      run: |
        sed -n '/^ARG/s/ARG *\(.*\)=\(.*\)/::set-output name=\1::\2/p' Dockerfile

    - name: Download EOTile
      uses: robinraju/release-downloader@v1.1
      with:
        repository: "WorldCereal/ewoc_eotile"
        tag: "${{ steps.cots-versions.outputs.EOTILE_VERSION }}"
        fileName: "eotile-${{ steps.cots-versions.outputs.EOTILE_VERSION }}-py3-none-any.whl"
        token: ${{ secrets.CS_ORG_TOKEN }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install eotile-${{ steps.cots-versions.outputs.EOTILE_VERSION }}-py3-none-any.whl
        pip install build
        pip install pylint

    - name: Analysing the code with pylint
      run: pylint --output-format=text $(find -type f -name "*.py" ! -path "**/venv/**")

    - name: Build package
      run: python -m build

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: distribution
        path: ./dist

  release-python:

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-python

    steps:

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: distribution
        path: ./dist

    - name: Version
      id: version
      run: |
        echo ::set-output name=VERSION::`python setup.py --version`

    - name: Version name
      id: version_name
      run: |
        echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Wheel
      id: upload-whl 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/dataship-${{ steps.version.outputs.VERSION }}-py3-none-any.whl
        asset_name: dataship-${{ steps.version.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/octet-stream

    - name: Upload Egg
      id: upload-egg 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/dataship-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: dataship-${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/octet-stream